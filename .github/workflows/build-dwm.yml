name: Build and Release DWM Package

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set GH_TOKEN for GitHub CLI
        run: echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Get DWM Version and Release
        id: get_version
        run: |
          VERSION=$(grep 'pkgver=' PKGBUILD | cut -d'=' -f2)
          RELEASE=$(grep 'pkgrel=' PKGBUILD | cut -d'=' -f2)
          echo "DWM version is $VERSION, release is $RELEASE"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV

      - name: Build DWM package in Arch Linux
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace archlinux:base-devel bash -c "
            useradd -m builder &&
            passwd -d builder &&
            echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers &&
            chown -R builder:builder /workspace &&
            pacman -Syu --noconfirm &&
            pacman -S --noconfirm libx11 libxft libxinerama imlib2 freetype2 git &&
            sudo -u builder bash -c '
              cd /workspace &&
              makepkg --syncdeps --noconfirm --cleanbuild
            '
          "

      - name: Delete Old Release (if Exists)
        run: |
          EXISTING_RELEASE=$(gh release list --limit 1 | awk '{print $1}')
          if [ -n "$EXISTING_RELEASE" ]; then
            echo "Deleting existing release: $EXISTING_RELEASE"
            gh release delete "$EXISTING_RELEASE" --yes
          else
            echo "No existing release found."
          fi

      - name: Create a New Release
        run: |
          VERSION_TAG="v${{ env.VERSION }}-${{ env.RELEASE }}"
          echo "Creating release: $VERSION_TAG"
          gh release create "$VERSION_TAG" /workspace/*.pkg.tar.zst \
            --title "$VERSION_TAG" \
            --notes "Release for DWM $VERSION_TAG"

